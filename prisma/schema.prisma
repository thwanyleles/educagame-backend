generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int         @id @default(autoincrement())
  name            String
  email           String      @unique
  password        String
  role            Role
  turma           Turma?      @relation("AlunoTurma", fields: [turmaId], references: [id])
  turmaId         Int?
  turmasProfessor Turma[]     @relation("ProfessorTurma")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Resultado       Resultado[]
  Badge           Badge[]
  Activity        Activity[]
}

model Turma {
  id          Int        @id @default(autoincrement())
  name        String
  professor   User       @relation("ProfessorTurma", fields: [professorId], references: [id])
  professorId Int
  alunos      User[]     @relation("AlunoTurma")
  quizzes     Quiz[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Activity    Activity[]
}

model Quiz {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  turma       Turma       @relation(fields: [turmaId], references: [id])
  turmaId     Int
  perguntas   Pergunta[]
  resultados  Resultado[]
  categoria   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Pergunta {
  id        Int        @id @default(autoincrement())
  texto     String
  quiz      Quiz       @relation(fields: [quizId], references: [id])
  quizId    Int
  respostas Resposta[]
  createdAt DateTime   @default(now())
}

model Resposta {
  id         Int      @id @default(autoincrement())
  texto      String
  correta    Boolean
  pergunta   Pergunta @relation(fields: [perguntaId], references: [id])
  perguntaId Int
}

model Resultado {
  id        Int      @id @default(autoincrement())
  aluno     User     @relation(fields: [alunoId], references: [id])
  alunoId   Int
  quiz      Quiz     @relation(fields: [quizId], references: [id])
  quizId    Int
  pontuacao Int      @default(0)
  feedback  String?
  createdAt DateTime @default(now())

  @@unique([alunoId, quizId])
}

model Badge {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  aluno       User?    @relation(fields: [alunoId], references: [id])
  alunoId     Int?
  createdAt   DateTime @default(now())
}

model Notificacao {
  id               Int      @id @default(autoincrement())
  title            String
  message          String
  destinatarioTipo String
  destinatarioId   Int
  createdAt        DateTime @default(now())
}

model Activity {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  link        String?
  turma       Turma    @relation(fields: [turmaId], references: [id])
  turmaId     Int
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  filePath    String?
}

enum Role {
  admin
  professor
  aluno
}
